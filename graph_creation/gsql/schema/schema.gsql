USE GLOBAL

CREATE VERTEX SCCase (PRIMARY_ID caseId STRING, caseName STRING, winningParty STRING, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH PRIMARY_ID_AS_ATTRIBUTE = "True"
CREATE VERTEX PetitionerType (PRIMARY_ID petitionerId STRING, petitionerTypeName STRING, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH PRIMARY_ID_AS_ATTRIBUTE = "True"
CREATE VERTEX RespondentType (PRIMARY_ID respondentId STRING, respondentTypeName STRING, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH PRIMARY_ID_AS_ATTRIBUTE = "True"
CREATE VERTEX State (PRIMARY_ID stateId STRING, stateName STRING, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH PRIMARY_ID_AS_ATTRIBUTE = "True"
CREATE VERTEX OriginOfCaseType (PRIMARY_ID originOfCaseId STRING, originOfCaseName STRING, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH PRIMARY_ID_AS_ATTRIBUTE = "True"
CREATE VERTEX Issue (PRIMARY_ID issueId STRING, issueName STRING, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH PRIMARY_ID_AS_ATTRIBUTE = "True"
CREATE VERTEX IssueArea (PRIMARY_ID issueAreaId STRING, issueAreaName STRING, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH PRIMARY_ID_AS_ATTRIBUTE = "True"
CREATE VERTEX Justice (PRIMARY_ID justiceId STRING, justiceName STRING, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH PRIMARY_ID_AS_ATTRIBUTE = "True"

CREATE DIRECTED EDGE CASE_CITED (FROM SCCase, TO SCCase, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "CITED_BY"
CREATE DIRECTED EDGE PETITIONER_IN_STATE (FROM SCCase, TO State, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "STATE_CONTAINS_PETITIONER"
CREATE DIRECTED EDGE RESPONDENT_IN_STATE (FROM SCCase, TO State, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "STATE_CONTAINS_RESPONDENT"
CREATE DIRECTED EDGE PETITIONER_TYPE (FROM SCCase, TO PetitionerType, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "PETITIONER_TYPE_IN_CASE"
CREATE DIRECTED EDGE RESPONDENT_TYPE (FROM SCCase, TO RespondentType, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "RESPONDENT_TYPE_IN_CASE"
CREATE DIRECTED EDGE CASE_ORIGIN (FROM SCCase, TO OriginOfCaseType, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "ORIGIN_OF_CASE"
CREATE DIRECTED EDGE CASE_ORIGIN_FROM_STATE (FROM SCCase, TO State, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "STATE_ORIGIN_OF_CASE"
CREATE DIRECTED EDGE CASE_ISSUE (FROM SCCase, TO Issue, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "ISSUE_OF_CASE"
CREATE DIRECTED EDGE ISSUE_IN_AREA (FROM Issue, TO IssueArea, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "AREA_CONTAINS_ISSUE"
CREATE DIRECTED EDGE VOTED_IN_FAVOR_OF_DEFENDANT (FROM Justice, TO SCCase, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "VOTE_IN_FAVOR_OF_DEFENDANT"
CREATE DIRECTED EDGE VOTED_IN_FAVOR_OF_PETITIONER (FROM Justice, TO SCCase, features LIST<DOUBLE>, embedding LIST<DOUBLE>) WITH REVERSE_EDGE = "VOTE_IN_FAVOR_OF_PETITIONER"

CREATE GRAPH @graphname@(SCCase, State, PetitionerType, RespondentType, OriginOfCaseType, Issue, IssueArea, Justice, 
                         CASE_CITED, PETITIONER_IN_STATE, RESPONDENT_IN_STATE, PETITIONER_TYPE, RESPONDENT_TYPE, CASE_ORIGIN, 
                         CASE_ORIGIN_FROM_STATE, CASE_ISSUE, ISSUE_IN_AREA, VOTED_IN_FAVOR_OF_DEFENDANT, VOTED_IN_FAVOR_OF_PETITIONER)
